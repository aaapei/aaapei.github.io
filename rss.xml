<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>I'm aaapei</title><link>http://blog.aaapei.com/</link><description></description><lastBuildDate>Sun, 05 Nov 2017 11:28:00 +0800</lastBuildDate><item><title>Android接入httpdns的另一种思路</title><link>http://blog.aaapei.com/article/2017/11/androidjie-ru-httpdnsde-ling-yi-chong-si-lu</link><description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;httpdns是基于Http协议的域名解析服务，用于替代基于UDP协议向运营商Local DNS发起解析请求的传统方式，目标是解决域名劫持和跨网访问等问题。&lt;/p&gt;
&lt;h3&gt;httpdns的接入&lt;/h3&gt;
&lt;p&gt;传统的使用Local DNS的方式，我们只需要在url中指定hostname；网络库帮我们做了域名解析、ttl缓存管理，我们不需要关心底层的流程。&lt;/p&gt;
&lt;p&gt;但当使用httpdns，就需要我们自己向httpdns发起http请求，获取到域名对应的ip。一般商业的httpdns sdk都会提供域名解析成ip的方法，一般的开发者接入httpdns还是需要做以下工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从URL中提取hostname，通过httpdns sdk获取到对应的IP&lt;/li&gt;
&lt;li&gt;将URL中的hostname替换成IP&lt;/li&gt;
&lt;li&gt;设置请求Header的Host字段&lt;/li&gt;
&lt;li&gt;如果请求的是HTTPS，修改证书的域名验证策略&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;android端有三个网络基础库，具体的接入方式会有差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apache httpclient&lt;/li&gt;
&lt;li&gt;http urlconnection&lt;/li&gt;
&lt;li&gt;okhttp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于最后一个okhttp，由于它本身提供的设置外部dns的api，接入最简单，只需要简单的实现okhttp提供的&lt;em&gt;lookup&lt;/em&gt;方法即可；但针对apache和urlconnection，就只能采取显式将url中的hostname替换成ip的方式了，然后添加Host头和HTTPS证书验证策略。但由于apache httpclient和urlconnection在设计之初，就没有考虑外部设置dns的策略，进行相关的接入时，总有各种异常case需要处理，比如apache http client在实现上，使用的是url中的ip信息作为cookie存储管理的key …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">郑文</dc:creator><pubDate>Sun, 05 Nov 2017 11:28:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2017-11-05:/article/2017/11/androidjie-ru-httpdnsde-ling-yi-chong-si-lu</guid><category>httpdns</category></item><item><title>也谈MultiDex的优化</title><link>http://blog.aaapei.com/article/2017/01/ye-tan-multidexde-you-hua</link><description>&lt;p&gt;旧文一篇，看到移动开发前线推送了&lt;a href="https://zhuanlan.zhihu.com/p/24305296"&gt;MultiDex工作原理分析和优化方案&lt;/a&gt;，也将我们的MultiDex启动优化思路分享给社区&lt;/p&gt;
&lt;h3&gt;MultiDex存在的问题&lt;/h3&gt;
&lt;p&gt;我们经常说的MultiDex，可以分成运行时和编译时两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编译时的分包机制，将app中的class以某种策略将class分散在多个dex中，目的是减少为了第一个dex也就是main dex中包含的class。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行时： app启动时，虚拟机只加载main dex中的class。app启动以后，使用&lt;em&gt;Multidex.install&lt;/em&gt; API，通过反射修改ClassLoader中的dexElements加载其他dex。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MultiDex机制的出现本身是为了避免出现app 65535问题的出现，但随着业务逻辑的增长，以及不合理的模块划分，可能会导致main dex的方法数也超出了65535，这就导致了&lt;em&gt;main dex capacity exceeded&lt;/em&gt;异常。&lt;/p&gt;
&lt;p&gt;此外，Multidex的接入额外还会对app的启动性能造成影响。Multidex在install时需要加载dex，首次启动时还需要做odex的转换，而这些都是在ui主线程中完成。
根据&lt;a href="https://medium.com/@Macarse/lazy-loading-dex-files-d41f6f37df0e#.3vx8kle8j"&gt; Carlos Sessa&lt;/a&gt;的测试，启用multidex后，4.4或以下的设备，app的启动时间平均会增加15%，更严重的情况，甚至在启动时候会出现了黑屏。&lt;/p&gt;
&lt;p&gt;目前部分app采取的策略是，放弃掉Multidex的 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">郑文</dc:creator><pubDate>Tue, 17 Jan 2017 14:26:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2017-01-17:/article/2017/01/ye-tan-multidexde-you-hua</guid><category>multidex</category></item><item><title>网易云课堂的android微专业课程</title><link>http://blog.aaapei.com/article/2016/08/wang-yi-yun-ke-tang-de-androidwei-zhuan-ye-ke-cheng</link><description>&lt;p&gt;懒癌晚期，一年多没更新blog，近一两月项目以外做了两件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在听云和infoq的&lt;a href="http://www.apmcon.cn/"&gt;apmcon&lt;/a&gt;大会做了个android 编译器hook的分享，ppt地址在&lt;a href="http://nos.netease.com/knowledge/fd1ba942-d609-4fa4-bdce-e1003febc1ce?download=apmcon_apm%E6%96%B9%E6%A1%88%E6%8E%A2%E7%B4%A2_v0818.pdf"&gt;网易APM hook方案探索&lt;/a&gt;，介绍了我们在编译期做bytecode植入的一些实践工作，有兴趣的同学可以和我私信交流；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;和杭研的同事们一起做了在线的Android课程，讲师基本囊括了网易杭研院各部门的大牛，课程针对在校生和1年以下工作经验的新同学。想了解我们工作方式的同学可以看看，通过下面这个链接购买成功的朋友，也可以私信我下，我再返个微信红包给你 ：）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;android网易云课堂微专业：&lt;a href="http://mooc.study.163.com/smartSpec/detail/1001168002.htm?utm_source=832006&amp;amp;utm_medium=cps&amp;amp;utm_campaign=affiliate"&gt;android&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ios网易云课堂微专业：&lt;a href="http://mooc.study.163.com/smartSpec/detail/1001168001.htm?utm_source=832006&amp;amp;utm_medium=cps&amp;amp;utm_campaign=affiliate"&gt;ios&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Thu, 25 Aug 2016 14:26:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2016-08-25:/article/2016/08/wang-yi-yun-ke-tang-de-androidwei-zhuan-ye-ke-cheng</guid><category>android</category><category>apm</category></item><item><title>从DeepLinkDispatch谈谈组件跳转</title><link>http://blog.aaapei.com/article/2015/07/cong-deeplinkdispatchtan-tan-zu-jian-tiao-zhuan</link><description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;最近airbnb开源了&lt;a href="https://github.com/airbnb/DeepLinkDispatch"&gt;DeepLinkDispatch&lt;/a&gt;项目，DeepLinkDispatch是一个基于注解的链接跳转库，简单了解完其实现后，想起了Facebook今年5月公布的另一个项目&lt;a href="http://applinks.org/"&gt;AppLink&lt;/a&gt;,于是有了这篇文章。&lt;/p&gt;
&lt;h3&gt;AppLink&lt;/h3&gt;
&lt;p&gt;与其说AppLink是一个框架，更不如说他是一个规范。当app内嵌WebView遇到自定义的Schema时，app只能简单的将url转交给系统，或直接显示页面无法加载。AppLink规范旨在解决各个平台的app跳转的问题。第三方网页或者app接入applink后，跳转方可以根据AppLink规范进行&lt;em&gt;精确&lt;/em&gt;的目标跳转以及&lt;em&gt;数据传输&lt;/em&gt;。
引用官方文档中的例子,example.hmtl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;al:ios:url&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;applinks://docs&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;al:ios:app_store_id&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;12345&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;al:ios:app_name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;App Links&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Sun, 26 Jul 2015 14:26:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2015-07-26:/article/2015/07/cong-deeplinkdispatchtan-tan-zu-jian-tiao-zhuan</guid><category>android</category><category>applink</category></item><item><title>booking.com android客户端的bitmap复用</title><link>http://blog.aaapei.com/article/2015/02/bookingcom-androidke-hu-duan-de-bitmapfu-yong</link><description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;被鞭炮吵得睡不着觉，rss中找一篇简单的文档翻译下，原文链接：http://blog.booking.com/android-reuse-bitmaps.html，大部分团队应该都做过这个bitmap优化，不过估计设置过BitmapFactory.Options.inTempStorage参数的应该不多 :)&lt;/p&gt;
&lt;p&gt;booking.com android客户端在新版本的增加了一个新功能：酒店的图片集合&lt;/p&gt;
&lt;p&gt;&lt;img alt="此处输入图片的描述" src="http://blog.booking.com/static/android-reuse-bitmaps/hotel_photo_header.png"&gt;&lt;/p&gt;
&lt;p&gt;不幸的是，增加了这个新功能后，发现这个应用的内存消耗增长了20%。图片集的界面的滑动有明显的卡顿，经定位，我们发现viewpager加载图片时的gc问题造成了以上的问题。由于应用的图片资源多；控件布局层次复杂；数据量较大，造成内存的申请很容易触发GC。&lt;/p&gt;
&lt;p&gt;当申请bitmap内存时，logcat输出信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GC_FOR_ALLOC freed 3255K, 20% free 21813K/26980K, paused 62ms, total 62ms
GC_FOR_ALLOC freed 710K, 20% free 30242K/37740K, paused 72ms …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Thu, 19 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2015-02-19:/article/2015/02/bookingcom-androidke-hu-duan-de-bitmapfu-yong</guid><category>bitmap，性能优化</category></item><item><title>facebook新闻页ListView优化</title><link>http://blog.aaapei.com/article/2015/02/facebookxin-wen-ye-listviewyou-hua</link><description>&lt;h3&gt;引言&lt;/h3&gt;
&lt;p&gt;原文链接：&lt;a href="https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/"&gt;https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/&lt;/a&gt; 
透漏的信息量不大，且大多数项目并不会遇到facebook这种ListView的场景，不过可以拓展下思路：逻辑单元不一定是视图单元；移动端不要死搬MVC的架构，在市场上仍是中低端机型为主时，还是应该多考虑性能；附上rebbit的关于本文的&lt;a href="http://www.reddit.com/r/androiddev/comments/2tzrqe/fast_rendering_news_feed_on_android/"&gt;讨论&lt;/a&gt;，有些干货 :)&lt;/p&gt;
&lt;h3&gt;基础知识&lt;/h3&gt;
&lt;p&gt;android系统每隔16.7ms发出一个渲染信号，通知ui线程进行界面的渲染。为了达到流畅的体验，应用程序需要在这个时间内完成应用逻辑，使系统达到60fps。当一个Listview被添加到布局时，其关联的adapter的getView方法将会被回调。在16.7毫秒这样一个时间单元内，可见listitem单元的getView方法将被按照顺序执行。在大多数情况下，由于其他绘图行为的存在，例如measure和draw，getVIew实际分配到执行时间远低于16ms。一旦listview包含复杂控件时，在16毫秒内不能完成渲染，用户只能看到上一祯的结果，这时就发生了掉帧。&lt;/p&gt;
&lt;h3&gt;Facebook新闻页介绍&lt;/h3&gt;
&lt;p&gt;Facebook的新闻页是一个复杂的listview控件，如何使它获得流畅的滚动体验一直困扰我们。
首先，新闻页的每一条新闻的可见区域非常大，包含一系列的文本以及照片；其次，新闻的展现类型也很多样，除了文本以及照片，新闻的附件还可包含链接、音频 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2015-02-01:/article/2015/02/facebookxin-wen-ye-listviewyou-hua</guid><category>listview，性能优化</category></item><item><title>android异步编程</title><link>http://blog.aaapei.com/article/2014/12/androidyi-bu-bian-cheng</link><description>&lt;p&gt;在android开发中，有两条很重要的&lt;a href="http://developer.android.com/guide/components/processes-and-threads.html"&gt;编程准则&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要堵塞ui线程&lt;/li&gt;
&lt;li&gt;不要在非ui线程操作ui控件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发者必须这两个遵守单线程模型的准则，将耗时的逻辑转移到非ui线程进行，得出计算结果后，通知ui线程进行数据的展现。本文介绍一下android的异步编程。&lt;/p&gt;
&lt;h3&gt;android线程模型&lt;/h3&gt;
&lt;p&gt;同hotspot vm一样，在daivlk vm中，采取的是1：1线程模型，每一个android thread对应一个Native Linux thread；linux内核通过cfs（completely fair scheduler）来进行线程调度，在cfs中着影响一个线程时间分配的因素有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;thread priority&lt;/li&gt;
&lt;li&gt;thread group&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;thread group&lt;/h4&gt;
&lt;p&gt;线程的thread group是动态改变的，在android framework层面，android的应用有5个等级，分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;foreground process&lt;/li&gt;
&lt;li&gt;visible process&lt;/li&gt;
&lt;li&gt;service process&lt;/li&gt;
&lt;li&gt;backgroud process&lt;/li&gt;
&lt;li&gt;empty process  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们的thread …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Sun, 21 Dec 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2014-12-21:/article/2014/12/androidyi-bu-bian-cheng</guid><category>异步</category><category>android</category></item><item><title>dalvik jni解析</title><link>http://blog.aaapei.com/article/2014/11/dalvik-jnijie-xi</link><description>&lt;p&gt;android开发者在移植第三方native库时,经常会使用到jni. &lt;br&gt;
Java Native Interface(java本地接口),用于java与c/c++代码进行交互.需要了解的是,jni只是jvm的一个规范,各家虚拟机有各自的实现,本文分享一下dalvik中jobject reference的实现.&lt;/p&gt;
&lt;h3&gt;jobject reference type&lt;/h3&gt;
&lt;p&gt;jni规范中,对jobject定义了两种reference类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局引用（global reference）&lt;/li&gt;
&lt;li&gt;局部引用（local reference）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在JNI Specification中的说明是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Local references are valid for the duration of a native method call, and are automatically freed after the native method returns. Global references …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2014-11-09:/article/2014/11/dalvik-jnijie-xi</guid><category>jni</category><category>dalvik</category></item><item><title>blog.aaapei.com</title><link>http://blog.aaapei.com/article/2014/08/blogaaapeicom</link><description>&lt;p&gt;前端时间为了科学上网买了个vps，准备用aaapei这个主域名收回来，用在vps跑一些试验性服务，blog切到二级子域名 blog.aaapei.com&lt;/p&gt;
&lt;p&gt;最近一两个月会将aaapei.com的80端口重定向到blog子域名，顺便扯一句，godaddy的重定向服务在国内被禁，所以在vps上又跑了个tornado实例，专门做重定向；google analytics上看月pv也就几百，我一定是想多了 :&amp;lt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Sat, 09 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2014-08-09:/article/2014/08/blogaaapeicom</guid><category>域名</category></item><item><title>android中lua脚本的部署</title><link>http://blog.aaapei.com/article/2014/04/androidzhong-luajiao-ben-de-bu-shu</link><description>&lt;p&gt;“愤怒的小鸟”中，lua脚本是运行时部署在应用的data目录，同时做了脚本加密；&lt;br&gt;
但是如果你的lua脚本有了模块包，脚本就会有多级目录，而android的data目录下是不允许有子目录；&lt;br&gt;
当然，lua脚本也可以在运行时拷贝到外置sd卡中，不过既然放置在不安全的公共目录，就会有被第三方删除或篡改的危险，那么每次启动的时候必须做一次文件校验，同时，也必须对脚本进行加密，避免程序逻辑暴露；  &lt;/p&gt;
&lt;h3&gt;lua自定义加载器&lt;/h3&gt;
&lt;p&gt;lua引擎提供了一个自定义加载器，当lua脚本中调用require时，会回调到自定义加载器的CFunction；利用这样特性，可以尝试取消掉脚本的运行时拷贝，而直接从应用的asset资源目录加载；自定义加载器的原理中，云风的blog中有介绍，&lt;a href="http://blog.codingnow.com/2007/04/user_define_lua_loader.html"&gt;以自定义方式加载lua模块&lt;/a&gt;&lt;br&gt;
直接贴个代码实现  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addAssetLuaLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lua_State&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lua_CFunction&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;lua_getglobal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;package&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                   
   &lt;span class="n"&gt;lua_getfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;loaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
   &lt;span class="n"&gt;lua_pushcfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Sat, 19 Apr 2014 23:21:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2014-04-19:/article/2014/04/androidzhong-luajiao-ben-de-bu-shu</guid><category>android</category><category>lua</category></item><item><title>lua在跨语言环境中的内存泄露</title><link>http://blog.aaapei.com/article/2014/02/luazai-kua-yu-yan-huan-jing-zhong-de-nei-cun-xie-lu</link><description>&lt;p&gt;前段时间在android环境中使用lua,采用的luabridge是luajava,遇到一个内存泄露问题,查了很久,终于定位了;&lt;/p&gt;
&lt;p&gt;场景是这样的:&lt;br&gt;
1:在lua中创建了一个java对象,将jobject指针传递给java;对应在luajava中,即传递了一个luaobject给java;java保存了这个对象;&lt;br&gt;
2:在Lua中需要对这个java对象设置一个事件回调,比如说为某个控件setOnClickListener;&lt;br&gt;
其中设置的代码是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;viewclick_cb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;viewclick_cb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;listenerProxy&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luajava&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;android.view.View$OnClickListener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;viewclick_cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       
&lt;span class="n"&gt;javaobjhandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListenerProxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lua和java交互时,对象生命周期管理分两种情况:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1:java对象传递个lua虚拟机,lua虚拟机为java对象创建一个userdata,在globalref中增加一个引用,标记这个java对象正在被使用;同时,为这个userdata设置一个__gc元方法,当lua对象需要被释放时,_gc元方法回调,释放掉java对象的globaref …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Wed, 19 Feb 2014 19:50:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2014-02-19:/article/2014/02/luazai-kua-yu-yan-huan-jing-zhong-de-nei-cun-xie-lu</guid><category>lua</category><category>luajava</category></item><item><title>android bitmap tips</title><link>http://blog.aaapei.com/article/2014/01/android-bitmap-tips</link><description>&lt;p&gt;大部分android开发者只知道bitmap再使用之后，需要显式的调用一次bitmap.recycle，回收bitmap内存;  &lt;/p&gt;
&lt;p&gt;这个观点，在android3.0之后其实已经过时了，android3.0将bitmap所引用的位图资源从native heap移到虚拟机的heap空间，bitmap的生命周期由虚拟机管理，开发者只需要保证在应用中不在持有对bitmap的引用，即可保证不发生内存泄漏；位图资源的内存由GC进行回收；&lt;br&gt;
将bitmap的位图内存转移到虚拟机heap后，由于位图资源本身较大，造成gc的概率的增加   &lt;/p&gt;
&lt;h3&gt;bitmap proxy&lt;/h3&gt;
&lt;p&gt;在一般的应用场景中，bitmap的引用一般是和imageview关联；当大量imageview持有对bitmap的引用时，虚拟机无法释放bitmap的内存，导致oom；&lt;/p&gt;
&lt;p&gt;针对这种场景，开发者可以实现一个bitmap的代理类，作为bitmap和imageview的中间层，在imageview不可见时（例如imageview是一个listview的子控件，listview发生滚动/activiy切换到后台），即释放掉对bitamp的引用；当imageview重新可见时，通过代理类重新去加载bitmap，以解耦bitmap和iamgeview的引用关系;   &lt;/p&gt;
&lt;h3&gt;inBitmap&lt;/h3&gt;
&lt;p&gt;android在3.0之后新增了一个BitmapFactory.Options.inBitmap开关，加了这个开关之后，bitmapfactory在加载位图时候，会尝试使用inbitmap指向的已分配在heap中位图空间；而不是重新申请一块内存；从而减少了虚拟机最讨厌的短生命周期大内存对象；  不过这个开关有严格的使用场景，即两个bitamp的位图大小必须一致&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Tue, 28 Jan 2014 17:30:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2014-01-28:/article/2014/01/android-bitmap-tips</guid><category>android</category></item><item><title>jnlua吐槽</title><link>http://blog.aaapei.com/article/2013/12/jnluatu-cao</link><description>&lt;p&gt;纯吐槽 &lt;/p&gt;
&lt;p&gt;前端时间对luabridge的性能问题很头痛,后来找到号称jni实现的&lt;em&gt;jnlua&lt;/em&gt;, 从原理上说,如果luabridge在动态绑定的逻辑可以只在jni上完成,而不走虚拟机的解释器,性能上可以提升很多,在jnlua的项目主页上还找到了,5.1的android移植版，于是打开beyondcompare迅速合并了个5.2的android移植版，实际运行的时候直接秒退了.翻了下代码,一口老血.   &lt;/p&gt;
&lt;p&gt;jnlua号称jni实现，但事实上动态绑定的几个api还是通过java实现，由于luabridge的瓶颈基本都在反射那块，和luajava相比，jnlua没有性能上的优势,算是典型的重复造轮子  &lt;/p&gt;
&lt;p&gt;至于所谓的5.1的android移植版,它为了兼容android的lib不支持的java.beans.BeanInfo类，删除了相关的JavaModule，DefaultJavaReflector两个类,代价是android移植版不再支持了lua脚本中调用java！  &lt;/p&gt;
&lt;p&gt;口怕的是，jnlua的项目主页竟然还加了移植版的链接，  &lt;/p&gt;
&lt;p&gt;虽然应该支持开源项目，但是挂这样一个半成品项目在主页上，还是要说一句  你在外面这么屌，luajava知道吗  &lt;/p&gt;
&lt;p&gt;各位想用jnlua的android同学，如果非要用jnlua的话，移植的时候其实是可以引入一些第三方库的，比如&lt;em&gt;openbeans&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;jnlua的代码结构较luajava层次分的更加清晰一些，api粒度更细;
好吧，个人觉得这种基础架构型的bridge，性能才是决定是否使用的第一要素，继续用luajava吧&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Sun, 29 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2013-12-29:/article/2013/12/jnluatu-cao</guid><category>lua</category></item><item><title>微信的jsbridge实现</title><link>http://blog.aaapei.com/article/2013/12/wei-xin-de-jsbridgeshi-xian</link><description>&lt;p&gt;微信公共平台开放了几个操作webview界面的js接口&lt;br&gt;
示例代码是这样的:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;WeixinJSBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;getNetworkType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,{},&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;WeixinJSBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;err_msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;android的webview api中有开放过一个&lt;em&gt;addJavaScriptInterface&lt;/em&gt;函数,这个函数的作用是在页面的Window中注入一个JS对象&lt;br&gt;
如果你的应用中使用了这个api,建议先看一下国内安全领域第一人黑哥的这篇文章&lt;a href="http://hi.baidu.com/hi_heige/item/9baf99f063331d58c9f3379a"&gt;android webview 漏洞背后的节操&lt;/a&gt;,  &lt;/p&gt;
&lt;p&gt;没耐心的同学直接看结尾的解决方案吧:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第1个方案是设置信任域，这个问题其实是不太靠谱的，在我之前在kcon里演讲《去年跨过的浏览器》里有很多信任域带来的安全问题&lt;br&gt;
 第2个方案是使用 shouldOverrideUrlLoading 的方式，据说这个方案还是比较靠谱的，只是可能代价比较大&lt;br&gt;
 第3个方案就是教育那些开发商，没有必要用webview的时候就不要用，不要java与js交互就不要用  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过,按黑哥这篇文章的想法,这个漏洞危险等级很低,可以无视之&lt;br&gt;
暂时把安全问题放一边,Js对象的注入,对函数的参数类型有严格要求,它只能传递基本数据类型以及JSON&lt;br&gt;
但微信的JsApi中,参数三是一个函数对象,那他是如果做到的呢&lt;/p&gt;
&lt;h3&gt;逆向&lt;/h3&gt;
&lt;p&gt;Android原生的机制既然不能支持函数对象的传递,于是猜测微信是否会对原始的api做了一层包装;&lt;br&gt;
先下载weixin …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Wed, 11 Dec 2013 19:50:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2013-12-11:/article/2013/12/wei-xin-de-jsbridgeshi-xian</guid><category>android</category><category>微信</category></item><item><title>luajava性能优化</title><link>http://blog.aaapei.com/article/2013/12/luajavaxing-neng-you-hua</link><description>&lt;p&gt;最近在做一个lua的android项目,对于lua的生态环境完全陌生,所以选用了个文档资料最全的lua bridge:&lt;em&gt;luajava&lt;/em&gt;&lt;br&gt;
luajava目前只支持到lua5.1,不过升级到5.2困难不大,主要是一些宏开关以及静态变量;然而实际运行的时候发现卡的很不行,ui频繁掉祯,profile后发现90%+的cpu耗时在luajava中  &lt;/p&gt;
&lt;p&gt;看了一下luajava本身代码量不大;索性就追了一下,luajava的native层就一个luajava.c,java层,除了LuaJavaApi.java,其他java类都是Value Object&lt;/p&gt;
&lt;h3&gt;lua逻辑分析&lt;/h3&gt;
&lt;p&gt;先看lua创建java object的代码,luajava.c中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;javaNewInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;lua_State&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;     
    &lt;span class="c1"&gt;//some code …..&lt;/span&gt;
    &lt;span class="n"&gt;method&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;javaEnv&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;GetStaticMethodID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;javaEnv&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;luajava_api_class&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;javaNewInstance&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(ILjava/lang/String;)I&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;//先调用java层创建javaobject&lt;/span&gt;
    &lt;span class="n"&gt;javaClassName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;javaEnv&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;NewStringUTF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;javaEnv&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;className …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">zhengwen</dc:creator><pubDate>Mon, 02 Dec 2013 20:20:00 +0800</pubDate><guid isPermaLink="false">tag:blog.aaapei.com,2013-12-02:/article/2013/12/luajavaxing-neng-you-hua</guid><category>lua</category><category>android</category></item></channel></rss>